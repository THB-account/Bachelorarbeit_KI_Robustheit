# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import GrpcKommunikation.classifications_manager_pb2 as classifications__manager__pb2


class ClassificationsManagerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.jobs = channel.stream_stream(
                '/logbee.anne.carl.classification.ClassificationsManager/jobs',
                request_serializer=classifications__manager__pb2.JobUpstream.SerializeToString,
                response_deserializer=classifications__manager__pb2.JobDownstream.FromString,
                )
        self.outcomes = channel.stream_stream(
                '/logbee.anne.carl.classification.ClassificationsManager/outcomes',
                request_serializer=classifications__manager__pb2.OutcomeDownstream.SerializeToString,
                response_deserializer=classifications__manager__pb2.OutcomeUpstream.FromString,
                )
        self.list = channel.unary_unary(
                '/logbee.anne.carl.classification.ClassificationsManager/list',
                request_serializer=classifications__manager__pb2.ListCommandMessage.SerializeToString,
                response_deserializer=classifications__manager__pb2.ListReplyMessage.FromString,
                )


class ClassificationsManagerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def jobs(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def outcomes(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClassificationsManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'jobs': grpc.stream_stream_rpc_method_handler(
                    servicer.jobs,
                    request_deserializer=classifications__manager__pb2.JobUpstream.FromString,
                    response_serializer=classifications__manager__pb2.JobDownstream.SerializeToString,
            ),
            'outcomes': grpc.stream_stream_rpc_method_handler(
                    servicer.outcomes,
                    request_deserializer=classifications__manager__pb2.OutcomeDownstream.FromString,
                    response_serializer=classifications__manager__pb2.OutcomeUpstream.SerializeToString,
            ),
            'list': grpc.unary_unary_rpc_method_handler(
                    servicer.list,
                    request_deserializer=classifications__manager__pb2.ListCommandMessage.FromString,
                    response_serializer=classifications__manager__pb2.ListReplyMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'logbee.anne.carl.classification.ClassificationsManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ClassificationsManager(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def jobs(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/logbee.anne.carl.classification.ClassificationsManager/jobs',
            classifications__manager__pb2.JobUpstream.SerializeToString,
            classifications__manager__pb2.JobDownstream.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def outcomes(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/logbee.anne.carl.classification.ClassificationsManager/outcomes',
            classifications__manager__pb2.OutcomeDownstream.SerializeToString,
            classifications__manager__pb2.OutcomeUpstream.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/logbee.anne.carl.classification.ClassificationsManager/list',
            classifications__manager__pb2.ListCommandMessage.SerializeToString,
            classifications__manager__pb2.ListReplyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
