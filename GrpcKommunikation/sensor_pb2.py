# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: sensor.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import GrpcKommunikation.util_pb2 as util__pb2
import GrpcKommunikation.metadata_pb2 as metadata__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x0csensor.proto\x1a\nutil.proto\x1a\x0emetadata.proto\"\x1f\n\x08SensorId\x12\x13\n\x04uuid\x18\x01 \x01(\x0b\x32\x05.UUID\"i\n\x10SensorDescriptor\x12\x15\n\x02id\x18\x01 \x01(\x0b\x32\t.SensorId\x12\x1d\n\nproperties\x18\x02 \x03(\x0b\x32\t.Property\x12\x1f\n\x08\x65ndpoint\x18\x03 \x01(\x0b\x32\r.GrpcEndpointB8\n)com.daimler.smartfactory.anne.model.protoB\x0bSensorProtob\x06proto3')



_SENSORID = DESCRIPTOR.message_types_by_name['SensorId']
_SENSORDESCRIPTOR = DESCRIPTOR.message_types_by_name['SensorDescriptor']
SensorId = _reflection.GeneratedProtocolMessageType('SensorId', (_message.Message,), {
  'DESCRIPTOR' : _SENSORID,
  '__module__' : 'sensor_pb2'
  # @@protoc_insertion_point(class_scope:SensorId)
  })
_sym_db.RegisterMessage(SensorId)

SensorDescriptor = _reflection.GeneratedProtocolMessageType('SensorDescriptor', (_message.Message,), {
  'DESCRIPTOR' : _SENSORDESCRIPTOR,
  '__module__' : 'sensor_pb2'
  # @@protoc_insertion_point(class_scope:SensorDescriptor)
  })
_sym_db.RegisterMessage(SensorDescriptor)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n)com.daimler.smartfactory.anne.model.protoB\013SensorProto'
  _SENSORID._serialized_start=44
  _SENSORID._serialized_end=75
  _SENSORDESCRIPTOR._serialized_start=77
  _SENSORDESCRIPTOR._serialized_end=182
# @@protoc_insertion_point(module_scope)
